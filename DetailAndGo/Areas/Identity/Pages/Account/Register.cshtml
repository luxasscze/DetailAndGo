@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
    Layout = null;
}

<link rel="stylesheet" href="~/css/Register.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />


<h2 style="color: #fff;" class="text-center">Register</h2>

@{
        /*<div class="row">
            <div class="col-md-4">
            <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
                <h2>Create a new account.</h2>
                <hr />
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-floating">
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                    <label asp-for="Input.Email"></label>
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.Password"></label>
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.ConfirmPassword"></label>
                    <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.FirstName" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.FirstName"></label>
                    <span asp-validation-for="Input.FirstName" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.LastName" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.LastName"></label>
                    <span asp-validation-for="Input.LastName" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.Address1" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.Address1"></label>
                    <span asp-validation-for="Input.Address1" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.Address2" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.Address2"></label>
                    <span asp-validation-for="Input.Address2" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.Address3" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.Address3"></label>
                    <span asp-validation-for="Input.Address3" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.PostCode" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.PostCode"></label>
                    <span asp-validation-for="Input.PostCode" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.CarModel" class="form-control" autocomplete="new-password" aria-required="true" />
                    <label asp-for="Input.CarModel"></label>
                    <span asp-validation-for="Input.CarModel" class="text-danger"></span>
                </div>
                <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
        </div>
        <div class="col-md-6 col-md-offset-2">
                <section>
                <h3>Use another service to register.</h3>
                <hr />
                @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                            {
                                <div>
                                    <p>
                                    There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                                    about setting up this ASP.NET application to support logging in via external services</a>.
                            </p>
                </div>
                }
                else
                            {
                            <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                                    <div>
                                        <p>
                                        @foreach (var provider in Model.ExternalLogins)
                                            {
                                            <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                    }
                                </p>
                            </div>
                </form>
                }
            }
        </section>
    </div>
    </div>*/
}

<div id="progress" class="center"></div>

<div class="center">
    <div id="register">

        <i id="previousButton" class="fa fa-arrow-left"></i>
        <i id="forwardButton" class="fa fa-arrow-right" style="margin-bottom: 7px;"></i>

        <div id="inputContainer">
            <input id="inputField" required multiple />
            <label id="inputLabel"></label>
            <div id="inputProgress"></div>
        </div>

    </div>
</div>



<script>
    /**********

    This Pen uses no libraries except fonts and should
    work on all modern browsers

    The answers are stored in the `questions` array
    with the key `answer`.

    inspired by XavierCoulombeM
    https://dribbble.com/shots/2510592-Simple-register-form

    **********/

    var questions = [
        { question: "What's your first name?" },
        { question: "What's your last name?" },
        { question: "What's your email?", pattern: /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/ },
        { question: "Create your password", type: "password" },
        { question: "Repeat the password", type: "password" },
        { question: "What's your first line address?" },
        { question: "What's your second line address?" },
        { question: "What's your city?" },
        { question: "What's your post code?" },
        { question: "What's your car model?" }
    ]

    /*
      do something after the questions have been answered
    */
    var onComplete = function () {

        console.log(questions);
        var h1 = document.createElement('h1')
        h1.appendChild(document.createTextNode('Thanks ' + questions[0].answer + ' for checking this pen out!'))
        setTimeout(function () {
            register.parentElement.appendChild(h1)
            setTimeout(function () { h1.style.opacity = 1 }, 50)
        }, 1000);



    }

        ; (function (questions, onComplete) {

            var tTime = 100 // transition transform time from #register in ms
            var wTime = 200 // transition width time from #register in ms
            var eTime = 1000 // transition width time from inputLabel in ms

            // init
            // --------------
            if (questions.length == 0) return

            var position = 0

            putQuestion()

            forwardButton.addEventListener('click', validate)
            inputField.addEventListener('keyup', function (e) {
                transform(0, 0) // ie hack to redraw
                if (e.keyCode == 13) validate()
            })

            previousButton.addEventListener('click', function (e) {
                if (position === 0) return
                position -= 1
                hideCurrent(putQuestion)
            })


            // functions
            // --------------

            // load the next question
            function putQuestion() {
                inputLabel.innerHTML = questions[position].question
                inputField.type = questions[position].type || 'text'
                inputField.value = questions[position].answer || ''
                inputField.focus()

                // set the progress of the background
                progress.style.width = position * 100 / questions.length + '%'

                previousButton.className = position ? 'fa fa-arrow-left' : 'fa fa-user'

                showCurrent()

            }

            // when submitting the current question
            function validate() {

                var validateCore = function () {
                    return inputField.value.match(questions[position].pattern || /.+/)
                }

                // CALL AJAX HERE TO VALIDATE THE EMAIL IF EXISTS OR NOT
                if (position == 2) {
                    console.log('email reached...');
                }

                //CHECK FOR PASSWORD MATCH, IF NOT TRY TO SHAKE THE BOX
                if (position == 5) {
                    if(questions[3].answer == questions[4].answer) {
                        console.log('Password match');
                    }
                    else {
                        console.log('Password not match');
                    }
                }

                if (!questions[position].validate) questions[position].validate = validateCore

                // check if the pattern matches
                if (!questions[position].validate()) wrong(inputField.focus.bind(inputField))
                else ok(function () {

                    // execute the custom end function or the default value set
                    if (questions[position].done) questions[position].done()
                    else questions[position].answer = inputField.value

                    ++position

                    // if there is a new question, hide current and load next
                    if (questions[position]) hideCurrent(putQuestion)
                    else hideCurrent(function () {
                        // remove the box if there is no next question
                        register.className = 'close'
                        progress.style.width = '100%'

                        onComplete()

                    })

                })

            }


            // helper
            // --------------

            function hideCurrent(callback) {
                inputContainer.style.opacity = 0
                inputLabel.style.marginLeft = 0
                inputProgress.style.width = 0
                inputProgress.style.transition = 'none'
                inputContainer.style.border = null
                setTimeout(callback, wTime)
            }

            function showCurrent(callback) {
                inputContainer.style.opacity = 1
                inputProgress.style.transition = ''
                inputProgress.style.width = '100%'
                setTimeout(callback, wTime)
            }

            function transform(x, y) {
                register.style.transform = 'translate(' + x + 'px ,  ' + y + 'px)'
            }

            function ok(callback) {
                register.className = ''
                setTimeout(transform, tTime * 0, 0, 10)
                setTimeout(transform, tTime * 1, 0, 0)
                setTimeout(callback, tTime * 2)
            }

            function wrong(callback) {
                register.className = 'wrong'
                for (var i = 0; i < 6; i++) // shaking motion
                    setTimeout(transform, tTime * i, (i % 2 * 2 - 1) * 20, 0)
                setTimeout(transform, tTime * 6, 0, 0)
                setTimeout(callback, tTime * 7)
            }

        }(questions, onComplete))
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    }
